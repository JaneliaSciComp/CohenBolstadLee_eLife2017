;/*4-Axis Optical Motion Tracking System
;Interface to a pair of the AVAGO ADNS-6090 Optical Mouse Camera Chips for Motion Tracking
;
;Implemented in CodeVisionAVR IDE, v2.04.6 standard
;treadmill6090v2.hex included for direct upload to atmel chip (so you don't have to purchase CodeVision unless you want to change the code)
;Use Atmel's AVR Studio to upload the hex file to the ATMega644p
;
;Version 1.1
;May 5, 2010
;
;(c) Gus K Lott III, PhD
;
;Neurobiological Instrumentation Engineer
;HHMI - Janelia Farm Research Campus
;19700 Helix Dr., Ashburn, VA 20147
;lottg@janelia.hhmi.org
;
;*/
;
;//Defines for the ports on which the cameras connect
;#include <mega324.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#define gMISO_0 PORTB.4
;#define gdMISO_0 DDRB.4
;#define gMISO_1 PORTB.3
;#define gdMISO_1 DDRB.3
;#define gSCLK PORTB.6
;#define gdSCLK DDRB.6
;#define gMOSI PORTB.5
;#define gdMOSI DDRB.5
;#define gRESET PORTB.1
;#define gdRESET DDRB.1
;#define gNCS PORTB.2
;#define gdNCS DDRB.2
;
;//Ports for Real-Time Trigger Signals
;#define gCLK PORTB.0
;#define gdCLK DDRB.0
;#define gTRG PORTD.4
;#define gdTRG DDRD.4
;#define gaTRG PORTC.0
;#define gdaTRG DDRC.0
;
;#define RBUFFL 900
;
;
;void initialize(void);
;void puts_int(unsigned char newT);
;void pause50us(void);
;void pause10us(void);
;void ADNS_write(unsigned char data);
;void ADNS_read(void);
;void EEPROMDump(void);
;void firmUpload(void);
;void writeEEPROM(void);
;void commandExec(void);
;void grabFrames(void);
;void grabMotion(void);
;void resetADNS(void);
;void dumpRegisters(void);
;void setAnalogOut(void);
;
;//ADNS and gTemp must be register
;unsigned char register tick, ADNS, gTemp;
;unsigned char register gTemp2, ADNS0, ADNS1, sstate=0;
;unsigned char x[2],y[2],motion[2],squal[2],shut_low[2],shut_high[2],maxpix[2];
;unsigned char r_char, serialFlag=0, t_char, t_buffer[RBUFFL], r_buffer[RBUFFL], vTarget=0, vidTime=0, vidFlag=0;
;unsigned char Vf, Vs, Om, SampleCount=0, reportState=1;

	.DSEG
;unsigned int time_ms, serialTimeout=0, t_index=0, t_length=0, r_index=0;
;unsigned char binTime=0, binTarget=2, bin0x=128, bin0y=128, bin1x=128, bin1y=128, binFlag=0, binTemp=0, binScale=8;
;unsigned char bin0xc=0, bin0yc=0, bin1xc=0, bin1yc=0;
;
;
;
;
;
;
;
;
;//Timer Interrupt dedicated to sample rate control
;interrupt [TIM1_COMPA] void sample(void){
; 0000 0050 interrupt [14] void sample(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0051         gCLK=1;     //Raise sample clock (gCLK Port)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0052         gTRG=1;     //Keep Trigger high during experiment
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0053         #asm("sei")
;PCODE: $00000013 VOL: 0
	sei
;PCODE: $00000014 VOL: 0
; 0000 0054         grabMotion();
;PCODE: $00000015 VOL: 0
; 0000 0055 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;//Time base control for periods greater than one milisecond (such as serial timeout, video frame period, and analog output binning
;interrupt [TIM2_COMPA] void timebase(void)
; 0000 0059 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 005A            tick++;
;PCODE: $0000001B VOL: 0
; 0000 005B            gaTRG=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 005C            if (tick==5)  //5 ticks per ms, update ms clocks
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005D            {
; 0000 005E                 tick=0;
;PCODE: $00000021 VOL: 0
; 0000 005F                 time_ms++;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0060                 vidTime++;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0061                 binTime++;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0062 
; 0000 0063                 if (serialTimeout>1) serialTimeout--;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0064                 if (serialTimeout==1){
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0065                         serialTimeout=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0066                         sstate=0;
;PCODE: $00000039 VOL: 0
; 0000 0067                 }
; 0000 0068                 if (vidTime==vTarget&vTarget!=0){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0069                         vidTime=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 006A                         vidFlag=1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 006B                 }
; 0000 006C                 if (binTime==binTarget&binTarget!=0){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006D                         binTime=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006E                         //latch in bin values
; 0000 006F                         bin0xc=bin0x;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0070                         bin0x=128;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0071                         bin0yc=bin0y;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0072                         bin0y=128;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0073                         bin1xc=bin1x;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0074                         bin1x=128;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0075                         bin1yc=bin1y;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0076                         bin1y=128;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0077                         setAnalogOut();
;PCODE: $00000064 VOL: 0
; 0000 0078                         gaTRG=1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0079                 }
; 0000 007A            }
;PCODE: $00000067 VOL: 0
; 0000 007B }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;//Communications Interrupts - USART receive complete (data from user on PC)
;interrupt [USART0_RXC] void serial_receive0(void) // Non-Blocking ISR Driven Read to an input command Buffer
; 0000 007F {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0080         r_char=UDR0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0081 
; 0000 0082         switch(sstate){
;PCODE: $00000070 VOL: 0
; 0000 0083                 case 0:
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0084                         sstate=r_char;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0085                         r_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0086                         break;
;PCODE: $00000077 VOL: 0
; 0000 0087                 case 1: //High speed mode (7kHz) - No Shutter or SQual values
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0088                         r_buffer[r_index]=r_char;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0089                         serialFlag=1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008A                         break;
;PCODE: $00000080 VOL: 0
; 0000 008B                 case 128: //reading in new EEPROM contents from user
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008C                         r_buffer[r_index++]=r_char;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 008D                         if (r_index==1986){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008E                                 #asm("sei")
;PCODE: $0000008E VOL: 0
	sei
;PCODE: $0000008F VOL: 0
; 0000 008F                                 writeEEPROM();
;PCODE: $00000090 VOL: 0
; 0000 0090                                 firmUpload();
;PCODE: $00000091 VOL: 0
; 0000 0091                         }
; 0000 0092                 case 246: //Data return state.  0 = rotation coordinates, 1 = raw camera x/y
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0093                         reportState=r_char;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0094                         sstate=0;
;PCODE: $0000009A VOL: 0
; 0000 0095                         break;
;PCODE: $0000009B VOL: 0
; 0000 0096                 case 247: //Bin Time for Analog Output
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0097                         r_buffer[r_index++]=r_char;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0098                         if(r_index==2) serialFlag=1;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0099                         break;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 009A                 case 248:       //Write Arbitrary byte to ADNS
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 009B                         r_buffer[r_index++]=r_char;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 009C                         if (r_index==2) serialFlag=1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 009D                         break;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 009E                 case 249:       //Read Arbitrary byte from ADNS
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 009F                         r_buffer[r_index]=r_char;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A0                         serialFlag=1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A1                         break;
;PCODE: $000000C6 VOL: 0
; 0000 00A2                 case 250: //Turn off video
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A3                         r_buffer[r_index]=r_char;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A4                         serialFlag=1;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A5                         break;
;PCODE: $000000CF VOL: 0
; 0000 00A6                 case 251: //Read out a frame of pixels from the camera and send it to the user
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A7                         r_buffer[r_index]=r_char;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A8                         serialFlag=1;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00A9                         break;
;PCODE: $000000D8 VOL: 0
; 0000 00AA                 case 252: //Dump Internal Registers
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00AB                         r_buffer[r_index]=r_char;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00AC                         serialFlag=1;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00AD                         break;
;PCODE: $000000E1 VOL: 0
; 0000 00AE                 case 253: //Set Sample Rate of Motion Acquisition (2 byte sample period)
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00AF                         r_buffer[r_index++]=r_char;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B0                         if (r_index==2) serialFlag=1;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00B1                         break;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B2                 case 254: //Stop Data Acquisition
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00B3                         r_buffer[r_index]=r_char;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B4                         serialFlag=1;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00B5                         break;
;PCODE: $000000FB VOL: 0
; 0000 00B6                 case 255: //Start Data Acquisition
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B7                         r_buffer[r_index]=r_char;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00B8                         serialFlag=1;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00B9                         break;
;PCODE: $00000104 VOL: 0
; 0000 00BA         }
;PCODE: $00000105 VOL: 0
; 0000 00BB         //Turn on board LED
; 0000 00BC         serialTimeout=500;  //500ms Timeout on serial port commands so the system doesn't hang
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00BD 
; 0000 00BE }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;
;// ISR Driven Non-Blocking UART Write from FIFO Buffer of length RBUFFL  (Data register empty interrupt)
;interrupt [USART0_DRE] void uart0_send(void)
; 0000 00C2 {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00C3 
; 0000 00C4         if (t_index==t_length){  //End of Buffer
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C5                 UCSR0B=UCSR0B&0b11011111;  //Turn Off Send Loop if @ end of buffer
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00C6         }
; 0000 00C7         else{
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C8                 //Keep streaming out buffer
; 0000 00C9                 t_index++;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00CA                 if (t_index==RBUFFL) t_index=0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00CB                 UDR0=t_buffer[t_index];
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00CC         }
;PCODE: $00000124 VOL: 0
; 0000 00CD }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;
;//This function is called on chip reset and power up
;void main(void){
; 0000 00D0 void main(void){
;PCODE: $00000128 VOL: 0
; 0000 00D1         unsigned int i;
; 0000 00D2 
; 0000 00D3         initialize();
;	i -> R16,R17
;PCODE: $00000129 VOL: 0
; 0000 00D4 
; 0000 00D5         //Reset Camera Chips
; 0000 00D6         gNCS=0; //Open Communication Interface
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D7         ADNS_write(0x0a|128);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00D8         ADNS_write(0b00011100);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00D9         pause50us();
;PCODE: $00000132 VOL: 0
; 0000 00DA         i=0;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00DB         ADNS_write(0x2C|128);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00DC         ADNS_write(i);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DD         pause50us();
;PCODE: $0000013A VOL: 0
; 0000 00DE         ADNS_write(0x2D|128);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00DF         ADNS_write(~i);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E0         pause50us();
;PCODE: $00000142 VOL: 0
; 0000 00E1         ADNS_write(0x09|128);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00E2         ADNS_write(0b00000111);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E3         gNCS=1;  //Close Communication Interface
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00E4 
; 0000 00E5 
; 0000 00E6         //The "Operating System."
; 0000 00E7         //This while loop spins while interrupts are handled
; 0000 00E8         while(1){
;PCODE: $0000014B VOL: 0
; 0000 00E9                 if (serialFlag==1) commandExec();
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00EA                 if (vidFlag==1) grabFrames();
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00EB         }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00EC }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;
;void setAnalogOut(void){
; 0000 00EE void setAnalogOut(void){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00EF 
; 0000 00F0         //Make sure chip select is asserted
; 0000 00F1         PORTD.5=0; //CS (active low)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00F2         //Raise latch to block out changes
; 0000 00F3         PORTC.3=1; //LDAC (active low)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00F4 
; 0000 00F5         //Address DAC A (Vx0)
; 0000 00F6         PORTD.7=0; //A0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00F7         PORTC.2=0; //A1
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00F8         //Drop Write input for transition to latch
; 0000 00F9         PORTD.6=0; //WR (active low)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00FA         //update Vx0
; 0000 00FB         PORTA = bin0xc;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00FC         //latch value into register
; 0000 00FD         PORTD.6=1; //Raise WR
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00FE 
; 0000 00FF         //Address DAC B (Vy0)
; 0000 0100         PORTD.7=1; //A0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0101         PORTC.2=0; //A1
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0102         //Drop Write input for transition to latch
; 0000 0103         PORTD.6=0; //WR (active low)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0104         //update Vy0
; 0000 0105         PORTA=bin0yc;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0106         //latch value into register
; 0000 0107         PORTD.6=1; //Raise WR
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0108 
; 0000 0109         //Address DAC C (Vy1)
; 0000 010A         PORTD.7=0; //A0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 010B         PORTC.2=1; //A1
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 010C         //Drop Write input for transition to latch
; 0000 010D         PORTD.6=0; //WR (active low)
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 010E         //update Vy0
; 0000 010F         PORTA=bin1yc;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0110         //latch value into register
; 0000 0111         PORTD.6=1; //Raise WR
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0112 
; 0000 0113         //Address DAC D (Vx1)
; 0000 0114         PORTD.7=1; //A0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0115         PORTC.2=1; //A1
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0116         //Drop Write input for transition to latch
; 0000 0117         PORTD.6=0; //WR (active low)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0118         //update Vy0
; 0000 0119         PORTA=bin1xc;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 011A         //latch value into register
; 0000 011B         PORTD.6=1; //Raise WR
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 011C 
; 0000 011D         //Drop latch to Update all DAC registers
; 0000 011E         PORTC.3=0; //LDAC (active low)
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 011F         //deassert chip select
; 0000 0120         PORTD.5=1; //CS (active low)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0121 
; 0000 0122 }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;
;void grabMotion(void){
; 0000 0124 void grabMotion(void){
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0125 
; 0000 0126         gNCS=0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0127 
; 0000 0128         ADNS_write(0x50);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0129         TCNT0=0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 012A         while(TCNT0<24){};  //~75us allowing for events to be handled
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 012B         ADNS_read();
;PCODE: $0000019E VOL: 0
; 0000 012C         motion[0]=ADNS0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 012D         motion[1]=ADNS1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 012E         ADNS_read();
;PCODE: $000001A4 VOL: 0
; 0000 012F         x[0]=ADNS0;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0130         x[1]=ADNS1;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0131         ADNS_read();
;PCODE: $000001AA VOL: 0
; 0000 0132         y[0]=ADNS0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0133         y[1]=ADNS1;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0134         ADNS_read();  //Can stop here to increase sample speed
;PCODE: $000001B0 VOL: 0
; 0000 0135         squal[0]=ADNS0;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0136         squal[1]=ADNS1;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0137         ADNS_read();
;PCODE: $000001B6 VOL: 0
; 0000 0138         shut_high[0]=ADNS0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0139         shut_high[1]=ADNS1;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 013A         ADNS_read();
;PCODE: $000001BC VOL: 0
; 0000 013B         shut_low[0]=ADNS0;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 013C         shut_low[1]=ADNS1;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 013D         gNCS=1;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 013E 
; 0000 013F         //Calculate Fly Based Coordinates (or not)
; 0000 0140         switch(reportState){
;PCODE: $000001C4 VOL: 0
; 0000 0141         case 0:
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0142                 Vf=(unsigned char)((signed char)y[0]+(signed char)y[1])+128;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0143                 Vs=(unsigned char)((signed char)y[0]-(signed char)y[1])+128;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0144                 Om=(unsigned char)((signed char)x[0]+(signed char)x[1])+128;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0145                 x[0]=Vf;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0146                 y[0]=Vs;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0147                 x[1]=Om;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0148                 y[1]=128;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0149                 break;
;PCODE: $000001E3 VOL: 0
; 0000 014A         case 1:
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 014B                 x[0]+=128;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 014C                 y[0]+=128;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 014D                 x[1]+=128;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 014E                 y[1]+=128;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 014F                 break;
;PCODE: $000001F7 VOL: 0
; 0000 0150         }
;PCODE: $000001F8 VOL: 0
; 0000 0151 
; 0000 0152 
; 0000 0153         //Velocity Bins
; 0000 0154         if (x[0]>128) bin0x=bin0x+((x[0]-128)<<binScale);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0155         if (x[0]<128) bin0x=bin0x-((128-x[0])<<binScale);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0156         if (y[0]>128) bin0y=bin0y+((y[0]-128)<<binScale);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0157         if (y[0]<128) bin0y=bin0y-((128-y[0])<<binScale);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0158         if (x[1]>128) bin1x=bin1x+((x[1]-128)<<binScale);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0159         if (x[1]<128) bin1x=bin1x-((128-x[1])<<binScale);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 015A         if (y[1]>128) bin1y=bin1y+((y[1]-128)<<binScale);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 015B         if (y[1]<128) bin1y=bin1y-((128-y[1])<<binScale);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 015C 
; 0000 015D         //Clean Packet Structure so that only byte 0 has a value of 0 in any case
; 0000 015E         if (SampleCount==0) SampleCount=1;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 015F         shut_high[0]+=1;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0160         shut_high[1]+=1;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0161         if (shut_low[0]==0) shut_low[0]=1;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0162         if (shut_low[1]==0) shut_low[1]=1;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0163         squal[0]+=1;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0164         squal[1]+=1;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0165 
; 0000 0166         //Output Data to Serial Port Buffer
; 0000 0167         t_length=0;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0168         t_buffer[t_length++]=0;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0169         t_buffer[t_length++]=SampleCount++;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 016A         t_buffer[t_length++]=x[0];
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 016B         t_buffer[t_length++]=y[0];
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 016C         t_buffer[t_length++]=x[1];
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 016D         t_buffer[t_length++]=y[1];
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 016E 
; 0000 016F         t_buffer[t_length++]=squal[0];
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0170         t_buffer[t_length++]=squal[1];
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0171         t_buffer[t_length++]=shut_high[0];
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0172         t_buffer[t_length++]=shut_low[0];
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0173         t_buffer[t_length++]=shut_high[1];
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0174         t_buffer[t_length++]=shut_low[1];
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0175 
; 0000 0176         //Initialize interrupt driven serial port output (takes about 75us in parallel with this loop to complete)
; 0000 0177         t_index=0;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0178         t_length=11;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0179         UDR0 =t_buffer[t_index];
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 017A         UCSR0B=UCSR0B|0b00100000;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 017B 
; 0000 017C         gCLK=0;  //Lower sample clock (gCLK port)
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 017D 
; 0000 017E }
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;
;void commandExec(void){
; 0000 0180 void commandExec(void){
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0181         TCCR1B=0b00001000;  //Turn off any motion tracking
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0182         vTarget=0;      //Turn off any video acquisition
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0183         vidFlag=0;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0184         gTRG=0;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0185 
; 0000 0186         switch (sstate){
;PCODE: $0000030B VOL: 0
; 0000 0187                 case 247:       //Set AO bin speed/scale
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0188                         binTarget=r_buffer[1];
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0189                         binScale=r_buffer[2];
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 018A                         break;
;PCODE: $00000314 VOL: 0
; 0000 018B                 case 248:       //Write Arbitrary byte to ADNS
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 018C                         gNCS=0;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 018D                         ADNS_write(r_buffer[1]|0x80);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 018E                         pause50us();
;PCODE: $0000031F VOL: 0
; 0000 018F                         ADNS_write(r_buffer[2]);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0190                         gNCS=1;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0191                         break;
;PCODE: $00000326 VOL: 0
; 0000 0192                 case 249:       //Read Arbitrary byte from ADNS
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0193                         gNCS=0;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0194                         ADNS_write(r_buffer[1]);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0195                         pause50us();
;PCODE: $00000330 VOL: 0
; 0000 0196                         ADNS_read();
;PCODE: $00000331 VOL: 0
; 0000 0197                         gNCS=1;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0198                         puts_int(ADNS0);
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0199                         break;
;PCODE: $00000336 VOL: 0
; 0000 019A                 case 250:
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 019B                         vTarget=0;        //End Video, Reset Chip
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 019C                         resetADNS();
;PCODE: $0000033C VOL: 0
; 0000 019D                         break;
;PCODE: $0000033D VOL: 0
; 0000 019E                 case 251://Handle Video from the camera
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 019F                         vTarget=50;
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01A0                         break;
;PCODE: $00000343 VOL: 0
; 0000 01A1                 case 252:  //Return status information from cameras
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 01A2                         dumpRegisters();
;PCODE: $00000347 VOL: 0
; 0000 01A3                         break;
;PCODE: $00000348 VOL: 0
; 0000 01A4                 case 253:       //Set Sample Period
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01A5                         OCR1AH=r_buffer[1];
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 01A6                         OCR1AL=r_buffer[2];
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01A7                         break;
;PCODE: $00000352 VOL: 0
; 0000 01A8                 case 254: //Stop Motion Acquisition & video
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 01A9                         vTarget = 0;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01AA                         TCCR1B=0b00001000;
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01AB                         while(t_index!=t_length){}
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01AC                         #asm("rjmp 0")
;PCODE: $00000361 VOL: 0
	rjmp 0
;PCODE: $00000362 VOL: 0
; 0000 01AD                         break;
;PCODE: $00000363 VOL: 0
; 0000 01AE                 case 255: //Start Motion Acquisition
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 01AF                         gNCS=0;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 01B0                         /*ADNS_write(0x0b|128);  //Configure for fixed frame rate
; 0000 01B1                         ADNS_write(0b10001000);
; 0000 01B2                         pause50us();
; 0000 01B3                         ADNS_write(0x19|128);
; 0000 01B4                         ADNS_write(0x05);
; 0000 01B5                         pause50us();
; 0000 01B6                         ADNS_write(0x1a|128);
; 0000 01B7                         ADNS_write(0x0D);    */
; 0000 01B8 
; 0000 01B9                         pause50us();
;PCODE: $00000369 VOL: 0
; 0000 01BA                         ADNS_write(0x12|128);  //Motion Clear Register
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 01BB                         ADNS_write(0xaa);
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 01BC                         pause50us();
;PCODE: $00000370 VOL: 0
; 0000 01BD 
; 0000 01BE                         gNCS=1;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01BF                         TCNT1H=0;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01C0                         TCNT1L=0;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 01C1                         TCCR1B=0b00001010;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 01C2                         break;
;PCODE: $00000379 VOL: 0
; 0000 01C3 
; 0000 01C4         }
;PCODE: $0000037A VOL: 0
; 0000 01C5         //Turn off board LED
; 0000 01C6         sstate=0;
;PCODE: $0000037B VOL: 0
; 0000 01C7         serialFlag=0;
;PCODE: $0000037C VOL: 0
; 0000 01C8 }
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;
;
;void grabFrames(void){
; 0000 01CB void grabFrames(void){
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 01CC         unsigned int i;
; 0000 01CD         PORTB.0=1;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;	i -> R16,R17
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 01CE         TCCR1B=0b00001000;  //Stop any Motion Acquisition
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01CF 
; 0000 01D0         gNCS=0;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 01D1         ADNS_write(0x0a|128);
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01D2         ADNS_write(0b00011100);
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 01D3         TCNT0=0;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 01D4         while(TCNT0<16){};  //~50us allowing for events to be handled
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 01D5         ADNS_write(0x13|128);
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01D6         ADNS_write(0x83);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01D7         gNCS=1;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 01D8 
; 0000 01D9         time_ms=0;
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0000 01DA         while(time_ms<3){} //Wait 10us + 3 frame periods, 3ms should cover that.  Can be less
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 01DB 
; 0000 01DC         gNCS=0;
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 01DD         ADNS_write(0x40);
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01DE         TCNT0=0;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01DF         while(TCNT0<16){};  //~50us allowing for events to be handled
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 01E0 
; 0000 01E1         for (i=0; i<RBUFFL; i++){
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 01E2                 ADNS_read();
;PCODE: $000003BD VOL: 0
; 0000 01E3                 puts_int(ADNS0);
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01E4                 puts_int(ADNS1);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 01E5                 TCNT0=0;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 01E6                 while(TCNT0<4){};  //~10us allowing for events to be handled
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 01E7         }
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 01E8 
; 0000 01E9         //Send SQUAL
; 0000 01EA         //ADNS_write(0x05);
; 0000 01EB         //pause50us();
; 0000 01EC         //ADNS_read();
; 0000 01ED         //puts_int(ADNS0);
; 0000 01EE         //puts_int(ADNS1);
; 0000 01EF 
; 0000 01F0         gNCS=1;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 01F1 
; 0000 01F2         vidFlag=0;
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 01F3         PORTB.0=0;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 01F4 }
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;
;//Write the contents of r_buffer to the EEPROM for uploading the local firmware if Avago upgrades
;void writeEEPROM(void){
; 0000 01F7 void writeEEPROM(void){
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 01F8         unsigned int i;
; 0000 01F9 
; 0000 01FA         for (i=0; i<1986; i++){
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;	i -> R16,R17
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 01FB                 PINB.0=1;
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01FC                 while(EECR.1==1){};
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 01FD                 while(SPMCSR&0x01==1){};
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 01FE                 EEARH=i>>8;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 01FF                 EEARL=i;
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 0200                 EEDR=r_buffer[i];
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 0201 
; 0000 0202                 EECR=0b00000100;
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0203                 EECR=0b00000110;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0204         }
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0205 }
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;
;//Upload EEPROM Contents into ADNS Chip
;void firmUpload(void){
; 0000 0208 void firmUpload(void){
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 0209         unsigned int i, address;
; 0000 020A 
; 0000 020B         gNCS=0;
;PCODE: $0000040B VOL: 0
;	i -> R16,R17
;	address -> R18,R19
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 020C         //Write 0x1d to register 0x14 (SROM_enable register)
; 0000 020D         ADNS_write(0x14|128);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 020E         ADNS_write(0x1D);
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 020F         gNCS=1;
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 0210         //Wait at least 1 frame period
; 0000 0211         time_ms=0;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0212         while(time_ms<5){};
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 0213         gNCS=0;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0214         //Write 0x18 to register 0x14 (SROM_enable register)
; 0000 0215         ADNS_write(0x14|128);
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0216         ADNS_write(0x18);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0217         gNCS=1;
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 0218         pause50us();
;PCODE: $00000428 VOL: 0
; 0000 0219         gNCS=0;
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 021A 
; 0000 021B         //Begin burst mode writing
; 0000 021C         ADNS_write(0x60|128);
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 021D 
; 0000 021E         //EEPROM Address register to 0
; 0000 021F 
; 0000 0220         while(EECR.1==1) {PINB.0=1;}
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 0221         address=0;
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 0222         EEARH=address>>8;
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0223         EEARL=address;
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 0224 
; 0000 0225         for (i=0; i<1986; i++){
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 0226                 pause10us();
;PCODE: $00000446 VOL: 0
; 0000 0227 
; 0000 0228                 while(EECR.1==1){};
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 0229 
; 0000 022A                 //Execute Read Command w/ increment
; 0000 022B                 EECR=0b00000001;
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 022C                 address++;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 022D                 EEARH=address>>8;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 022E                 EEARL=address;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 022F 
; 0000 0230                 ADNS=EEDR;
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0231                 ADNS_write(ADNS);
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 0232                 pause10us();
;PCODE: $0000045A VOL: 0
; 0000 0233         }
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 0234 
; 0000 0235         gNCS=1;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 0236         pause50us();
;PCODE: $00000462 VOL: 0
; 0000 0237         pause50us();
;PCODE: $00000463 VOL: 0
; 0000 0238         pause50us();
;PCODE: $00000464 VOL: 0
; 0000 0239 }
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;
;//Reset Chip, takes 200ms
;void resetADNS(void){
; 0000 023C void resetADNS(void){
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 023D         //Toggle Reset
; 0000 023E         gRESET=1;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 023F         pause50us();
;PCODE: $0000046D VOL: 0
; 0000 0240         gRESET=0;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0241 
; 0000 0242         //wait for inputs & motion data to be valid
; 0000 0243         time_ms=0;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0244         while(time_ms<200){};
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 0245 
; 0000 0246 }
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;
;//DUMP Status Values from Each Camera to the User (currently only camera 0)
;void dumpRegisters(void){
; 0000 0249 void dumpRegisters(void){
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 024A         unsigned char regLoc[25]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x09,0x0a,0x0b,0x0e,0x0f,0x10,0x11,0x16,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x2c,0x2d,0x3d};
; 0000 024B         unsigned char i;
; 0000 024C 
; 0000 024D         gNCS=0;
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;	regLoc -> Y+1
;	i -> R17
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 024E 
; 0000 024F         for (i=0; i<25; i++){
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0250                 ADNS_write(regLoc[i]);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 0251                 TCNT0=0;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 0252                 while(TCNT0<16){};  //~50us allowing for events to be handled
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 0253                 ADNS_read();
;PCODE: $0000049C VOL: 0
; 0000 0254                 puts_int(ADNS0);
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 0255                 TCNT0=0;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0000 0256                 while(TCNT0<16){};  //~50us allowing for events to be handled
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0257         }
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 0258 
; 0000 0259 
; 0000 025A         gNCS=1;
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 025B }
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;
;//Dump EEPROM for firmware verification
;void EEPROMDump(void){
; 0000 025E void EEPROMDump(void){
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 025F         unsigned int i;
; 0000 0260 
; 0000 0261         for (i=0; i<1986; i++){
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;	i -> R16,R17
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0262                 while(EECR.1==1){};
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 0263                 //Execute Read Command w/ increment
; 0000 0264                 EEARH=i>>8;
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
; 0000 0265                 EEARL=i;
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 0266                 EECR=0b00000001;
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
; 0000 0267                 puts_int(EEDR);
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 0268                 pause50us();
;PCODE: $000004D0 VOL: 0
; 0000 0269         }
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
; 0000 026A }
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;
;//Pause for communication protocol
;void pause50us(void){
; 0000 026D void pause50us(void){
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 026E         unsigned char i=0;
; 0000 026F         while(i<250){
;PCODE: $000004DB VOL: 0
;	i -> R17
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 0270                 i++;
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 0271         }
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 0272 }
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;//Pause for communication protocol
;void pause10us(void){
; 0000 0274 void pause10us(void){
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 0275         unsigned char i=0;
; 0000 0276         while(i<40){
;PCODE: $000004EB VOL: 0
;	i -> R17
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0277                 i++;
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 0278         }
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 0279 }
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;
;//Initiate an interrupt driven UART output of a buffer's contents
;//or add a character to the FIFO buffer for transmit
;void puts_int(unsigned char newT)
; 0000 027E {
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 027F         UCSR0B=UCSR0B&0b11011111;  //Turn off DRE interrupt so that an interrupt doesn't happend during this fast buffer access and cause index/length mismatch
;	newT -> Y+0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 0280         t_length++;
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 0281         if (t_length==RBUFFL) t_length=0;
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 0282         t_buffer[t_length]=newT;
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 0283 
; 0000 0284         if (((UCSR0A&0b00100000)==0b00100000))
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 0285         {       //if not outputting, start subsystem
; 0000 0286                 t_index++;
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0287                 if (t_index==RBUFFL) t_index=0;
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 0288                 UDR0=t_buffer[t_index];
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 0289                 UCSR0B=UCSR0B|0b00100000;
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 028A         }
; 0000 028B         UCSR0B=UCSR0B|0b00100000;  //Re-enable DRE interrupt
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 028C }
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;
;
;
;
;void initialize(void){
; 0000 0291 void initialize(void){
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 0292 
; 0000 0293 
; 0000 0294         //Timer1 Setup for Sample Period, 16-bits for more timer resolution
; 0000 0295         TCCR1A=0b00000000;
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 0296         TCCR1B=0b00001000;
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 0297         TCCR1C=0b00000000;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 0298         TCNT1H=0;
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0299         TCNT1L=0;
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 029A         OCR1AH=2;   //4kHz
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 029B         OCR1AL=112;
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 029C         //OCR1AH=1;   //5kHz
; 0000 029D         //OCR1AL=243;
; 0000 029E 
; 0000 029F         TIMSK1=0b00000010;
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 02A0 
; 0000 02A1         //Timer2 Setup for 1ms timebase (this counts 0.2 ms exactly), 5 ticks = 1ms
; 0000 02A2         TCCR2A=0b00000010;
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 02A3         TCCR2B=0b00000011;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 02A4         TCNT2=0b00000000;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 02A5         OCR2A=125;
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 02A6         TIMSK2=0b00000010;
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 02A7 
; 0000 02A8         //Timer0 setup for delay timing
; 0000 02A9         TCCR0A=0b00000000;
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 02AA         TIMSK0=0b00000000;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 02AB         TCCR0B=0b00000011;
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 02AC         TCNT0=0;
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 02AD 
; 0000 02AE         //Setup UART0 for send/receive w/ user
; 0000 02AF         UBRR0H=0x00;
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 02B0         UBRR0L=1;  //1=1.25M, 4=0.5M, 21 = 115.2k, 42 = 57.6k
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 02B1         UCSR0A=0b00000010;
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 02B2         UCSR0B=0b10011000;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 02B3         UCSR0C=0b00000110;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 02B4 
; 0000 02B5         //Setup UART1 for comms with Other devices
; 0000 02B6         //UBRR1H=0x00;
; 0000 02B7         //UBRR1L=42;  //1=1.25M, 4=0.5M, 21 = 115.2k, 42 = 57.6k
; 0000 02B8         //UCSR1A=0b00000010;
; 0000 02B9         //UCSR1B=0b10011000;
; 0000 02BA         //UCSR1C=0b00000110;
; 0000 02BB 
; 0000 02BC         //Activate interrupts
; 0000 02BD         #asm("sei")
;PCODE: $00000556 VOL: 0
	sei
;PCODE: $00000557 VOL: 0
; 0000 02BE 
; 0000 02BF         //Raise Global NCS to reset ADNS comm interface
; 0000 02C0         gdNCS=1;
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 02C1         gNCS=1;
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 02C2         //Setup Read Ports for input
; 0000 02C3         gdMISO_0=0;  //Camera 0 (MISO)
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 02C4         gdMISO_1=0;  //Camera 1 (MISO)
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 02C5         //Setup Commoun Output ports for Writing to Cameras
; 0000 02C6         gdSCLK=1;
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 02C7         gSCLK=0;  //SCLK
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 02C8         gdMOSI=1;
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 02C9         gMOSI=0;  //MOSI
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 02CA         //Lower Active High Reset Pin
; 0000 02CB         gdRESET=1;
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 02CC         gRESET=0;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 02CD 
; 0000 02CE         gdCLK=1;
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 02CF         gCLK=0;
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 02D0         gdTRG=1;
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 02D1         gTRG=0;
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 02D2         gdaTRG=1;
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 02D3         gaTRG=0;
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 02D4 
; 0000 02D5         //DAC Communications
; 0000 02D6         DDRA=0xff;
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 02D7         DDRD=0xff;
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 02D8         DDRC=0xff;
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 02D9         PORTD.5=1; //CS
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 02DA 
; 0000 02DB         //Reset ADNS6090 Camera Chips
; 0000 02DC         time_ms=0;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 02DD         while (time_ms==0){}
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 02DE         gRESET=1; //Raise Reset pin
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 02DF         time_ms=0;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 02E0         while(time_ms<200){}
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 02E1         gRESET=0; //Drop Reset Pin
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 02E2         time_ms=0;
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 02E3         while(time_ms<180){}  //Motion Data is Valid 180ms after reset drops
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 02E4 
; 0000 02E5 }
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;
;
;//Tight Assembly Code loop for bit banging protocol @1MHz to WRITE a byte to the bus
;//byte to write is stored in ADNS (r4) but is passed as an input argument to the function
;void ADNS_write(unsigned char data){
; 0000 02EA void ADNS_write(unsigned char data){
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 02EB         ADNS=data;
;	data -> Y+0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 02EC         #asm
;PCODE: $000005A2 VOL: 0
; 0000 02ED                 mov _gTemp,_ADNS
                mov _gTemp,_ADNS
;PCODE: $000005A3 VOL: 0
; 0000 02EE                 clr r22
                clr r22
;PCODE: $000005A4 VOL: 0
; 0000 02EF         gWriteLoop:
        gWriteLoop:
;PCODE: $000005A5 VOL: 0
; 0000 02F0                 cbi $05,6       ;PortB = $05, Drop clock
                cbi $05,6       ;PortB = $05, Drop clock
;PCODE: $000005A6 VOL: 0
; 0000 02F1                 nop
                nop
;PCODE: $000005A7 VOL: 0
; 0000 02F2                 nop
                nop
;PCODE: $000005A8 VOL: 0
; 0000 02F3                 nop
                nop
;PCODE: $000005A9 VOL: 0
; 0000 02F4                 nop
                nop
;PCODE: $000005AA VOL: 0
; 0000 02F5                 nop
                nop
;PCODE: $000005AB VOL: 0
; 0000 02F6                 nop
                nop
;PCODE: $000005AC VOL: 0
; 0000 02F7 

;PCODE: $000005AD VOL: 0
; 0000 02F8                 sbrs _gTemp,7       ;Conditional statement to clock out bit 7
                sbrs _gTemp,7       ;Conditional statement to clock out bit 7
;PCODE: $000005AE VOL: 0
; 0000 02F9                 cbi $05,5
                cbi $05,5
;PCODE: $000005AF VOL: 0
; 0000 02FA                 sbrc _gTemp,7
                sbrc _gTemp,7
;PCODE: $000005B0 VOL: 0
; 0000 02FB                 sbi $05,5
                sbi $05,5
;PCODE: $000005B1 VOL: 0
; 0000 02FC 

;PCODE: $000005B2 VOL: 0
; 0000 02FD                 sbi $05,6       ;Raise Clock
                sbi $05,6       ;Raise Clock
;PCODE: $000005B3 VOL: 0
; 0000 02FE                 nop
                nop
;PCODE: $000005B4 VOL: 0
; 0000 02FF                 nop
                nop
;PCODE: $000005B5 VOL: 0
; 0000 0300                 nop
                nop
;PCODE: $000005B6 VOL: 0
; 0000 0301                 nop
                nop
;PCODE: $000005B7 VOL: 0
; 0000 0302                 nop
                nop
;PCODE: $000005B8 VOL: 0
; 0000 0303                 nop
                nop
;PCODE: $000005B9 VOL: 0
; 0000 0304                 lsl _gTemp          ;Logial Shift register left to place next bit in 7th position
                lsl _gTemp          ;Logial Shift register left to place next bit in 7th position
;PCODE: $000005BA VOL: 0
; 0000 0305                 inc r22
                inc r22
;PCODE: $000005BB VOL: 0
; 0000 0306                 cpi r22,8
                cpi r22,8
;PCODE: $000005BC VOL: 0
; 0000 0307                 breq gWriteOut
                breq gWriteOut
;PCODE: $000005BD VOL: 0
; 0000 0308                 rjmp gWriteLoop
                rjmp gWriteLoop
;PCODE: $000005BE VOL: 0
; 0000 0309         gWriteOut:
        gWriteOut:
;PCODE: $000005BF VOL: 0
; 0000 030A 

;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 030B         #endasm
; 0000 030C 
; 0000 030D }
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;
;//Tight Assembly code 1MHz bit banging protocol to READ a pair of parallel bytes into the ADNS0 and ADNS1  registers
;void ADNS_read(void){
; 0000 0310 void ADNS_read(void){
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 0311         #asm
;PCODE: $000005C7 VOL: 0
; 0000 0312                 ;r22 is free for arithmatic  (according to codevision documentation)
                ;r22 is free for arithmatic  (according to codevision documentation)
;PCODE: $000005C8 VOL: 0
; 0000 0313                 clr _ADNS0          ;clear ADNS data register
                clr _ADNS0          ;clear ADNS data register
;PCODE: $000005C9 VOL: 0
; 0000 0314                 clr _ADNS1
                clr _ADNS1
;PCODE: $000005CA VOL: 0
; 0000 0315                 ldi r22,0x01
                ldi r22,0x01
;PCODE: $000005CB VOL: 0
; 0000 0316                 mov _gTemp2,r22      ;gTemp2 is mask
                mov _gTemp2,r22      ;gTemp2 is mask
;PCODE: $000005CC VOL: 0
; 0000 0317                 clr r22         ;Increment through loop
                clr r22         ;Increment through loop
;PCODE: $000005CD VOL: 0
; 0000 0318 

;PCODE: $000005CE VOL: 0
; 0000 0319         gReadLoop:
        gReadLoop:
;PCODE: $000005CF VOL: 0
; 0000 031A                 lsl _ADNS0          ;Shift ADNS0 to left by 1
                lsl _ADNS0          ;Shift ADNS0 to left by 1
;PCODE: $000005D0 VOL: 0
; 0000 031B                 lsl _ADNS1          ;Shift ADNS1 to left by 1
                lsl _ADNS1          ;Shift ADNS1 to left by 1
;PCODE: $000005D1 VOL: 0
; 0000 031C                 cbi $05,6       ;drop clock to clock out bit from ADNS chip
                cbi $05,6       ;drop clock to clock out bit from ADNS chip
;PCODE: $000005D2 VOL: 0
; 0000 031D                 nop
                nop
;PCODE: $000005D3 VOL: 0
; 0000 031E                 inc r22
                inc r22
;PCODE: $000005D4 VOL: 0
; 0000 031F                 nop
                nop
;PCODE: $000005D5 VOL: 0
; 0000 0320                 nop
                nop
;PCODE: $000005D6 VOL: 0
; 0000 0321                 nop
                nop
;PCODE: $000005D7 VOL: 0
; 0000 0322                 clr _gTemp
                clr _gTemp
;PCODE: $000005D8 VOL: 0
; 0000 0323                 sbi $05,6       ;raise clock
                sbi $05,6       ;raise clock
;PCODE: $000005D9 VOL: 0
; 0000 0324                 nop
                nop
;PCODE: $000005DA VOL: 0
; 0000 0325                 nop
                nop
;PCODE: $000005DB VOL: 0
; 0000 0326                 nop
                nop
;PCODE: $000005DC VOL: 0
; 0000 0327                 in _gTemp,$03       ;read in the pin values on port b
                in _gTemp,$03       ;read in the pin values on port b
;PCODE: $000005DD VOL: 0
; 0000 0328 

;PCODE: $000005DE VOL: 0
; 0000 0329                 sbrc _gTemp,4
                sbrc _gTemp,4
;PCODE: $000005DF VOL: 0
; 0000 032A                 or _ADNS0,_gTemp2        ;if bit 4 is set, MISO0 is high, set LSB of ADNS0
                or _ADNS0,_gTemp2        ;if bit 4 is set, MISO0 is high, set LSB of ADNS0
;PCODE: $000005E0 VOL: 0
; 0000 032B                 sbrc _gTemp,3
                sbrc _gTemp,3
;PCODE: $000005E1 VOL: 0
; 0000 032C                 or _ADNS1,_gTemp2        ;if bit 3 is set, MISO1 is high, set LSB of ADNS1
                or _ADNS1,_gTemp2        ;if bit 3 is set, MISO1 is high, set LSB of ADNS1
;PCODE: $000005E2 VOL: 0
; 0000 032D 

;PCODE: $000005E3 VOL: 0
; 0000 032E 

;PCODE: $000005E4 VOL: 0
; 0000 032F                 cpi r22,8
                cpi r22,8
;PCODE: $000005E5 VOL: 0
; 0000 0330                 breq gReadOut
                breq gReadOut
;PCODE: $000005E6 VOL: 0
; 0000 0331                 rjmp gReadLoop
                rjmp gReadLoop
;PCODE: $000005E7 VOL: 0
; 0000 0332         gReadOut:
        gReadOut:
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0333         #endasm
; 0000 0334 
; 0000 0335 }
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;
